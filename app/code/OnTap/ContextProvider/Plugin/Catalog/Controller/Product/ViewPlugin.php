<?php
/*
 * Copyright (c) On Tap Networks Limited.
 */
namespace OnTap\ContextProvider\Plugin\Catalog\Controller\Product;

use Magento\Framework\Controller\Result\RedirectFactory;
use Magento\Catalog\Api\ProductRepositoryInterface;
use Magento\Framework\Controller\ResultFactory;
use Magento\UrlRewrite\Model\Storage\DbStorage;
use Magento\Store\Model\StoreManagerInterface;
use Magento\Framework\Serialize\Serializer\Json;
use Magento\Catalog\Api\CategoryRepositoryInterface;
use Magento\Framework\Exception\NotFoundException;

class ViewPlugin
{
    /**
     * @var RedirectFactory
     */
    protected RedirectFactory $redirectFactory;

    /**
     * @var ProductRepositoryInterface
     */
    protected ProductRepositoryInterface $productRepository;

    /**
     * @var DbStorage
     */
    protected DbStorage $rewriteStorage;

    /**
     * @var StoreManagerInterface
     */
    protected StoreManagerInterface $storeManager;

    /**
     * @var CategoryRepositoryInterface
     */
    protected CategoryRepositoryInterface $categoryRepository;

    /**
     * @var ResultFactory
     */
    protected ResultFactory $resultFactory;

    /**
     * ViewPlugin constructor.
     * @param RedirectFactory $redirectFactory
     * @param ProductRepositoryInterface $productRepository
     * @param DbStorage $rewriteStorage
     * @param StoreManagerInterface $storeManager
     * @param CategoryRepositoryInterface $categoryRepository
     * @param ResultFactory $resultFactory
     */
    public function __construct(
        RedirectFactory $redirectFactory,
        ProductRepositoryInterface $productRepository,
        DbStorage $rewriteStorage,
        StoreManagerInterface $storeManager,
        CategoryRepositoryInterface $categoryRepository,
        ResultFactory $resultFactory
    ) {
        $this->redirectFactory = $redirectFactory;
        $this->productRepository = $productRepository;
        $this->rewriteStorage = $rewriteStorage;
        $this->storeManager = $storeManager;
        $this->categoryRepository = $categoryRepository;
        $this->resultFactory = $resultFactory;
    }

    /**
     * @param \Magento\Catalog\Controller\Product\View $subject
     */
    public function afterExecute(\Magento\Catalog\Controller\Product\View $subject, $result)
    {
        // 16159817-months-supply-pure-collagen-liquid.html                 -   beauty/skincare/
        // beauty/16159817-months-supply-pure-collagen-liquid.html          -   skincare/
        // beauty/skincare/16159817-months-supply-pure-collagen-liquid.html -   /

        $categoryId = $subject->getRequest()->getParam('category', false);
        if ($categoryId !== false) {
            $category = $this->categoryRepository->get(
                $categoryId,
                $this->storeManager->getStore()->getId()
            );
            if ((int) $category->getLevel() === 3) {
                return $result;
            }
        }

        $productId = (int)$subject->getRequest()->getParam('id');

        /** @var \Magento\Catalog\Model\Product $product */
        $product = $this->productRepository->getById($productId);
        $categoryIds = $product->getCategoryIds();

        $json = new Json();
        $rewrite = $this->rewriteStorage->findOneByData([
            'entity_type' => 'product',
            'entity_id' => $productId,
            'store_id' => $this->storeManager->getStore()->getId(),
            'is_autogenerated' => 1,
            'metadata' => $json->serialize([
                'category_id' => array_pop($categoryIds)
            ])
        ]);

        if (!isset($rewrite)) {
            return $result;
        } else {
            $product->setRequestPath($rewrite->getRequestPath());
            $redirect = $this->redirectFactory->create();
            $redirect->setUrl($product->getProductUrl());
            return $redirect;
        }
    }
}
