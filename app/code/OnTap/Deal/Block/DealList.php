<?php
/*
 * Copyright (c) On Tap Networks Limited.
 */
namespace OnTap\Deal\Block;

use Magento\Catalog\Api\Data\CategoryInterface;
use Magento\Catalog\Api\Data\ProductInterface;
use Magento\Catalog\Api\ProductRepositoryInterface;
use Magento\Catalog\Block\Product\ListProduct;
use Magento\Catalog\Model\Product;
use Magento\Framework\App\ObjectManager;
use Magento\Framework\Exception\LocalizedException;
use Magento\Framework\Exception\RuntimeException;
use Magento\Framework\Serialize\Serializer\Json;
use Magento\UrlRewrite\Model\Storage\DbStorage;
use OnTap\Deal\Model\DealListModel;

class DealList extends ListProduct
{
    /**
     * @var array
     */
    protected array $items;

    /**
     * @var CategoryInterface
     */
    protected CategoryInterface $category;

    /**
     * {@inheritDoc}
     */
    public function getIdentities()
    {
        $identities = parent::getIdentities();

        try {
            /** @var \OnTap\ContextProvider\Block\Resolver $resolverBlock */
            $resolverBlock = $this->getLayout()->getBlock('context-aware.category.resolver');

            if ($resolverBlock) {
                $layoutName = $resolverBlock->getLayoutName();
                if ($layoutName) {
                    $identities[] = $layoutName;
                }
            }
        } catch (LocalizedException $e) {
            // noop
        }
        return $identities;
    }

    /**
     * @return int|null
     * @throws LocalizedException
     */
    public function getCategoryId()
    {
        return $this->getCategory()->getId();
    }

    /**
     * @return CategoryInterface
     * @throws LocalizedException
     */
    protected function getCategory(): CategoryInterface
    {
        if (isset($this->category)) {
            return $this->category;
        }

        $resolverBlock = $this->getLayout()->getBlock('context-aware.category.resolver');
        if ($resolverBlock === false) {
            throw new RuntimeException(__('The block "context-aware.category.resolver" was not found in the layout'));
        }
        $this->category = $resolverBlock
            ->getResolver()
            ->getCategory();

        return $this->category;
    }

    /**
     * @return DbStorage
     */
    protected function getRewriteDbStorage(): DbStorage
    {
        return ObjectManager::getInstance()->get(DbStorage::class);
    }

    /**
     * @return DealListModel
     */
    protected function getDealListModel(): DealListModel
    {
        return ObjectManager::getInstance()->get(DealListModel::class);
    }

    /**
     * @return ProductRepositoryInterface
     */
    protected function getProductRepository(): ProductRepositoryInterface
    {
        return ObjectManager::getInstance()->get(ProductRepositoryInterface::class);
    }

    /**
     * @return \Magento\Catalog\Model\ResourceModel\Product\Collection
     */
    protected function createCollection(): \Magento\Catalog\Model\ResourceModel\Product\Collection
    {
        return ObjectManager::getInstance()->create(\Magento\Catalog\Model\ResourceModel\Product\Collection::class);
    }

    /**
     * {@inheritDoc}
     */
    public function getLoadedProductCollection()
    {
        $model = $this->getDealListModel();
        if (empty($model->getCollection())) {
            $collection = parent::getLoadedProductCollection();

            $items = $collection->getItems();
            $json = new Json();

            $filter = [
                'entity_type' => 'product',
                'entity_id' => [],
                'store_id' => $this->_storeManager->getStore()->getId(),
                'is_autogenerated' => 1,
                'metadata' => []
            ];

            /** @var \Magento\Catalog\Model\Product $product */
            foreach ($items as $product) {
                // This allows product request path to be overwritten by subsequent list processing
                // usually that is not desired and it does not really work with singleton model either
//                if ($product->hasRequestPath()) {
//                    continue;
//                }

                $categoryIds = array_values($product->getCategoryIds());
                $lastCategoryId = array_pop($categoryIds);
                $filter['entity_id'][] = $product->getEntityId();
                $filter['metadata'][] = $json->serialize(['category_id' => $lastCategoryId]);
            }

            if (!empty($filter['entity_id'])) {
                $rewrites = $this->getRewriteDbStorage()->findAllByData($filter);
                foreach ($rewrites as $rewrite) {
                    $product = $collection->getItemById($rewrite->getEntityId());
                    if ($product !== null) {
                        $product->setRequestPath($rewrite->getRequestPath());
                    }
                }
            }

            $model->setCollection($collection);
        }

        return $model->getCollection();
    }

    /**
     * @return array
     */
    public function getLimitedProductCollection()
    {
        return array_slice(
            array_values($this->getLoadedProductCollection()->getItems()),
            $this->getData('offset'),
            $this->getData('limit')
        );
    }

    /**
     * @param ProductInterface $product
     * @return \Magento\Catalog\Block\Product\View\Gallery
     * @throws LocalizedException
     */
    public function getGalleryRenderer(ProductInterface $product): \Magento\Catalog\Block\Product\View\Gallery
    {
        $product = $this->getProductRepository()
            ->getById($product->getId());

        /** @var \Magento\Catalog\Block\Product\View\Gallery $gallery */
        $gallery = $this->getLayout()->createBlock(
            \Magento\Catalog\Block\Product\View\Gallery::class,
            sprintf('product.list.gallery.%s', $product->getId()),
            [
                'data' => [
                    'gallery_options' => $this->getData('gallery_options'),
                    'imageHelper' => $this->getData('image_helper'),
                    'product_id' => (string) $product->getId(),
                ]
            ]
        );

        $gallery->setTemplate('Magento_Catalog::right_column_list_large/gallery.phtml');
        $gallery->setData('product', $product);

        return $gallery;
    }

    /**
     * {@inheritDoc}
     */
    public function getProductPriceHtml(
        Product $product,
        $priceType = null,
        $renderZone = \Magento\Framework\Pricing\Render::ZONE_ITEM_LIST,
        array $arguments = []
    ) {
        if (!isset($arguments['zone'])) {
            $arguments['zone'] = $renderZone;
        }
        $arguments['price_id'] = isset($arguments['price_id'])
            ? $arguments['price_id']
            : 'old-price-' . $product->getId() . '-' . $priceType;
        $arguments['include_container'] = isset($arguments['include_container'])
            ? $arguments['include_container']
            : true;
        $arguments['display_minimal_price'] = isset($arguments['display_minimal_price'])
            ? $arguments['display_minimal_price']
            : true;

        /** @var \Magento\Framework\Pricing\Render $priceRender */
        $priceRender = $this->getLayout()->getBlock('product.price.render.default');
        if (!$priceRender) {
            $priceRender = $this->getLayout()->createBlock(
                \Magento\Framework\Pricing\Render::class,
                'product.price.render.default',
                ['data' => ['price_render_handle' => 'catalog_product_prices']]
            );
        }

        $price = $priceRender->render(
            'deal_price',
            $product,
            $arguments
        );

        return $price;
    }

    /**
     * Render pagination HTML
     *
     * @return string
     */
    public function getPagerHtml()
    {
        $pagerBlock = $this->getChildBlock('product_list_toolbar_pager');
        if ($pagerBlock instanceof \Magento\Framework\DataObject) {
            /* @var $pagerBlock \Magento\Theme\Block\Html\Pager */
            $pagerBlock->setAvailableLimit([10]);

            $pagerBlock->setUseContainer(
                false
            )->setShowPerPage(
                false
            )->setShowAmounts(
                false
            )->setFrameLength(
                null
            )->setJump(
                null
            )->setLimit(
                10
            )->setCollection(
                $this->getLoadedProductCollection()
            );
            return $pagerBlock->toHtml();
        }
        return '';
    }

    /**
     * {@inheritDoc}
     */
    protected function _beforeToHtml()
    {
        $collection = $this->_getProductCollection();

        if (!$collection->isLoaded()) {
            $pager = $this->getChildBlock('product_list_toolbar_pager');
            if ($pager) {
                $pager->setCollection($collection);
            }
        }

        return parent::_beforeToHtml();
    }
}
